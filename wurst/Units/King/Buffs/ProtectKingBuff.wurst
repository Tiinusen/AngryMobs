package ProtectKingBuff

import HashMap
import ClosureTimers
import HeroConstants
import initlater SoldierEntity
import BuffObjEditing

public let PROTECT_KING_BUFF_OBJ = compiletime(createDummyBuffObject("Protect the King", "This unit is currently guarding the King\n\n|cf4c0ae0eHe/she will not leave his side unless you order him to|r\n\n|cff00ff00See Hero Inventory|r", Icons.dISBTNDivineShieldOff, Abilities.soulBurnbuff, AttachmentPoints.overhead))

let buffId = PROTECT_KING_BUFF_OBJ.abilId

abstract class ProtectKingBuff
	private static HashMap<SoldierEntity, CallbackSingle> _buffMap = new HashMap<SoldierEntity, CallbackSingle>()

	static function has(SoldierEntity soldier) returns bool
		return _buffMap.has(soldier)

	static function add(SoldierEntity soldier, real duration)
		if _buffMap.has(soldier)
			let cb = _buffMap.get(soldier)
			if cb != null
				destroy cb
		if not soldier.getUnit().hasAbility(buffId)
			soldier.getUnit().addAbility(buffId)
		if duration > 0
			let cb = doAfter(duration) ->
				_remove(soldier, true)
			_buffMap.put(soldier, cb)
		else
			_buffMap.put(soldier, null)
		// Logic executed on buff creation
		soldier.getOwner().getSide().getKing().addGuard(soldier)

	static function remove(SoldierEntity soldier)
		_remove(soldier, false)

	private static function _remove(SoldierEntity soldier, bool expired)
		if _buffMap.has(soldier)
			if not expired
				destroy _buffMap.get(soldier)
			_buffMap.remove(soldier)
			if soldier.getUnit().hasAbility(buffId)
				soldier.getUnit().removeAbility(buffId)
			// Logic executed on buff removal
			soldier.getOwner().getSide().getKing().removeGuard(soldier)
			if expired and soldier.isAlive()
				soldier.decideNextAction()