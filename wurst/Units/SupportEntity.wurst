package SupportEntity

import public UnitEntity
import initlater Hero
import Worker
import LinkedList
import ControlledBuff
import InvulnerabilityBuff
import ClosureTimers
import ProtectKingBuff
import HashSet

abstract public class SupportEntity extends UnitEntity
	private static HashList<SupportEntity> _units = new HashList<SupportEntity>()

	construct(int typeID, vec2 pos, player owner)
		super(CreateUnit(owner, typeID, pos.x, pos.y, 270))
		this._init()
		

	construct(int typeID, vec2 pos, player owner, real dir)
		super(CreateUnit(owner, typeID, pos.x, pos.y, dir))
		this._init()

	construct(int typeID, unit obj)
		super(this.castIfNeeded(obj, typeID))
		this._init()

	construct(int typeID, Worker worker)
		super(this.castIfNeeded(worker.getUnit(), typeID))
		worker.remove(false)
		this._init()

	ondestroy
		SupportEntity._units.remove(this)

	private function _init()
		SupportEntity._units.add(this)
		this.onDeath() (unit killer, CallbackDeath callback) ->
			this._closureTerminator.after(5) -> 
				this.remove(true)
		nullTimer() -> 
			this.decideNextAction()

	static function getSupports() returns HashList<SupportEntity>
		return SupportEntity._units.copy()

	static function getSupports(LinkedListPredicate<SupportEntity> predicate) returns LinkedList<SupportEntity>
		let ll = new LinkedList<SupportEntity>()
		SupportEntity._units.forEach() (SupportEntity t) ->
			if predicate.isTrueFor(t)
				ll.add(t)
		return ll

	/** Forces all soldier untis to re-evalute next action */
	static function allDecideNextAction()
		SupportEntity._units.forEach() (SupportEntity t) ->
			t.decideNextAction()
			
	private function castIfNeeded(unit u, int typeID) returns unit
		if u.getTypeId() != typeID
			return ReplaceUnitBJ(u, typeID, bj_UNIT_STATE_METHOD_RELATIVE)
		return u
	
	function decideNextAction()
		if not this.isAlive()
			return
		let friendly = this.getOwner().getSide()
		let enemy = this.getOwner().getSide().getEnemySide()

		// Calculate distances
		let distanceToFriendlyGate = this.distanceTo(friendly.getGate().getPos())
		let distanceToEnemyGate = this.distanceTo(enemy.getGate().getPos())

		if  distanceToFriendlyGate < distanceToEnemyGate
			// Is closer to friendly gate
			if (friendly.getGate().getPos().x < 0 and this.getPos().x < friendly.getGate().getPos().x) or (friendly.getGate().getPos().x > 0 and friendly.getGate().getPos().x < this.getPos().x)
				// Is inside walls
				if not friendly.getGate().isOpen()
					// The gate is closed, let's protect it
					this.orderMove(friendly.getGate().getPos(), 600) (boolean fulfilled) ->
						if fulfilled
							this.orderStop()
						else
							this.debugOrder("Line 105")
							this._closureTerminator.after(1) -> 
								this.decideNextAction()
				else
					// Let's move towards the enemy gate
					this.orderMove(enemy.getGate().getPos(), 400) (boolean fulfilled) ->
						if fulfilled
							this.decideNextAction()
						else
							this.debugOrder("Line 114")
							this._closureTerminator.after(1) -> 
								this.decideNextAction()
			else
				// Is outside walls
				if not friendly.getGate().isOpen() or friendly.getGate().isDamaged()
					// Our gates needs attention, retreat to them and slaughter anything inbetween here and the friendly gate
					this.orderMove(friendly.getGate().getPos(), 400) (boolean fulfilled) ->
						if fulfilled
							// It's done, let's go for enemy gate like we originally planned
							this.orderMove(enemy.getGate().getPos(), 400) (boolean fulfilled) ->
								if fulfilled
									this.decideNextAction()
								else
									this.debugOrder("Line 128")
									this._closureTerminator.after(1) -> 
										this.decideNextAction()
						else
						
				else
					// Let's move towards enemy gate
					this.orderMove(enemy.getGate().getPos(), 400) (boolean fulfilled) ->
						if fulfilled
							this.decideNextAction()
						else
							this.debugOrder("Line 139")
							this._closureTerminator.after(1) -> 
								this.decideNextAction()
		else
			// Is closer to enemy gate
			if enemy.getGate().isOpen() or enemy.getGate().isDestroyed() or this.distanceTo(enemy.getKing()) < 1000
				// Gate is broken or the enemy king is near, so let's kill him
				if not this.orderMove(enemy.getKing().getPos())
					this.debugOrder("Line 147")
					this._closureTerminator.after(1) -> 
						this.decideNextAction()
			else if distanceToEnemyGate < 600
				// Close to the enemy gate, let's break it down
				this.orderStop()
				this._closureTerminator.after(1) -> 
					this.decideNextAction()
			else
				// Let's move towards the enemy gate
				this.orderMove(enemy.getGate().getPos(), 300) (boolean fulfilled) ->
					if fulfilled
						this.decideNextAction()
					else
						this.debugOrder("Line 162")
						this._closureTerminator.after(1) -> 
							this.decideNextAction()

		

	override function initalize()
		if this.getOwner().getPlayer() != this.getOwner().getSide().getSidePlayer()
			this.getUnit().setOwner(this.getOwner().getSide().getSidePlayer(), false)
		this.getUnit().setColor(this.getOwner().getPlayer().getColor())
