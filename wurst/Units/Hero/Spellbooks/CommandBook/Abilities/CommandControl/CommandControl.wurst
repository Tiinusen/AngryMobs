package CommandControl

import ClosureEvents
import ControlledBuff
import ClosureTimers
import Hero
import Owner
import SoldierEntity
import ItemObject
import Ids

init
	nullTimer() -> 
		EventListener.onTargetCast(COMMAND_CONTROL_UNIT_ID) (unit caster, unit target) ->
			let side = caster.getOwner().toOwnerType().getSide()
			if side != target.getOwner().toOwnerType().getSide()
				caster.getOwner().print("You can't target a non friendly unit")
			let soldier = SoldierEntity.getSoldiers((SoldierEntity t) -> t.getUnit() == target).getFirst()
			if soldier == null
				caster.getOwner().print("You can't target a non soldier")
			else
				ControlledBuff.add(soldier, caster.toHeroType(), 120)
				soldier.orderFollow(caster)

		EventListener.onPointCast(COMMAND_CONTROL_AREA_ID) (unit caster, vec2 target) ->
			let side = caster.getOwner().toOwnerType().getSide()
			SoldierEntity.getSoldiers((SoldierEntity soldier) -> soldier.getUnit().getOwner().toOwnerType().getSide() == side and soldier.isWithin(target, 600)).forEach() (SoldierEntity soldier) ->
				ControlledBuff.add(soldier, caster.toHeroType(), 30)
				soldier.orderFollow(caster)
		
		EventListener.onCast(COMMAND_CONTROL_RELEASE_ID) (unit caster) ->
			let hero = caster.toHeroType()
			hero.getControlledSoldiers().forEach() (SoldierEntity soldier) ->
				ControlledBuff.remove(soldier)

		EventListener.onPointCast(COMMAND_ATTACK_ID) (unit caster, vec2 target) ->
			let hero = caster.toHeroType()
			hero.getControlledSoldiers().forEach() (SoldierEntity soldier) ->
				soldier.orderAttack(target)

		EventListener.onPointCast(COMMAND_MOVE_ID) (unit caster, vec2 target) ->
			let hero = caster.toHeroType()
			hero.getControlledSoldiers().forEach() (SoldierEntity soldier) ->
				soldier.orderMove(target)

		EventListener.onPointCast(COMMAND_FOLLOW_ID) (unit caster, vec2 target) ->
			let hero = caster.toHeroType()
			hero.getControlledSoldiers().forEach() (SoldierEntity soldier) ->
				soldier.orderFollow(hero.getUnit())

public class CommandRecruitUnit extends ItemObject
	construct(item obj)
		super(obj, COMMAND_CONTROL_UNIT_ITEM_ID)

	construct(vec2 pos)
		super(pos, COMMAND_CONTROL_UNIT_ITEM_ID)

	construct(unit u)
		super(u, COMMAND_CONTROL_UNIT_ITEM_ID)

public class CommandRecruitArea extends ItemObject
	construct(item obj)
		super(obj, COMMAND_CONTROL_AREA_ITEM_ID)

	construct(vec2 pos)
		super(pos, COMMAND_CONTROL_AREA_ITEM_ID)

	construct(unit u)
		super(u, COMMAND_CONTROL_AREA_ITEM_ID)

public class CommandRelease extends ItemObject
	construct(item obj)
		super(obj, COMMAND_CONTROL_RELEASE_ITEM_ID)

	construct(vec2 pos)
		super(pos, COMMAND_CONTROL_RELEASE_ITEM_ID)

	construct(unit u)
		super(u, COMMAND_CONTROL_RELEASE_ITEM_ID)

public class CommandMove extends ItemObject
	construct(item obj)
		super(obj, COMMAND_MOVE_ITEM_ID)

	construct(vec2 pos)
		super(pos, COMMAND_MOVE_ITEM_ID)

	construct(unit u)
		super(u, COMMAND_MOVE_ITEM_ID)

public class CommandAttack extends ItemObject
	construct(item obj)
		super(obj, COMMAND_ATTACK_ITEM_ID)

	construct(vec2 pos)
		super(pos, COMMAND_ATTACK_ITEM_ID)

	construct(unit u)
		super(u, COMMAND_ATTACK_ITEM_ID)

public class CommandFollow extends ItemObject
	construct(item obj)
		super(obj, COMMAND_FOLLOW_ITEM_ID)

	construct(vec2 pos)
		super(pos, COMMAND_FOLLOW_ITEM_ID)

	construct(unit u)
		super(u, COMMAND_FOLLOW_ITEM_ID)