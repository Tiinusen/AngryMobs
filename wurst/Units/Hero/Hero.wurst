package Hero

import Ids
import Owner
import LinkedList
import SoldierEntity
import initlater CommandControl
import ControlledBuff

LinkedList<Hero> _heroes = new LinkedList<Hero>()    

public class Hero extends UnitEntity
    LinkedList<SoldierEntity> _controlledSoldiers = new LinkedList<SoldierEntity>()
    LinkedList<Hero> _challangedBy = new LinkedList<Hero>()

    private int _maxRespawnTime = bj_isSinglePlayer?1:10
    private int _respawnTime = 0
    private unit _ghost
    private bool _inChallange = false

    construct(unit obj)
        super(obj)
        this.getUnit().getOwner().toOwnerType().setHero(this)
        _heroes.add(this)

    construct(player owner, vec2 pos)
        super(CreateUnit(owner, HERO_ID, pos.x, pos.y, 270))
        this.getUnit().getOwner().toOwnerType().setHero(this)
        _heroes.add(this)

    construct(player owner, vec2 pos, real dir)
        super(CreateUnit(owner, HERO_ID, pos.x, pos.y, dir))
        this.getUnit().getOwner().toOwnerType().setHero(this)
        _heroes.add(this)

    ondestroy
        destroy _controlledSoldiers

    function inChallange() returns bool
        return this._inChallange

    function setInChallange(bool state)
        this._inChallange = state

    function isChallangedBy(Hero h) returns bool
        return this._challangedBy.has(h)

    function addChallangedBy(Hero h)
        this._challangedBy.add(h)

    function removeChallangedBy(Hero h)
        this._challangedBy.remove(h)

    function clearChallangers()
        this._challangedBy.clear()

    function reviveAndHideHeroAndShowGhost()
        this._ghost..setPos(this.getPos())
        super.revive(this._ghost.getPos())
        this.getUnit().hide()
        this._ghost.show()
        this.getOwner().getPlayer().select(this._ghost)

    function hideGhostAndShowHero()
        this.getUnit().setPos(this._ghost.getPos())
        this._ghost.hide()
        this.getUnit().show()
        this.getOwner().getPlayer().select(this.getUnit())

    function getGhost() returns unit
        return this._ghost

    function increaseRespawnTime(int add, bool allowOverMax) returns int
        this._respawnTime += add
        if not allowOverMax and this._respawnTime > this.getMaxRespawnTime()
            this._respawnTime = this.getMaxRespawnTime()
        return this._respawnTime

    function decreaseRespawnTime(int sub) returns int
        this._respawnTime -= sub
        if this._respawnTime < 0
            this._respawnTime = 0
        return this._respawnTime

    function getRespawnTime() returns int
        return this._respawnTime

    function getMaxRespawnTime() returns int
        return this._maxRespawnTime

    function increaseMaxRespawnTime(int add) returns int
        this._maxRespawnTime += add
        return this.getMaxRespawnTime()

    function transferRespawnTime(Hero loser)
        loser.increaseRespawnTime(this.getRespawnTime(), true)
        this.decreaseRespawnTime(this.getRespawnTime())
        
        
    static function removeControlledSoldier(SoldierEntity soldier)
        _heroes.forEach() (Hero hero) ->
            if hero._controlledSoldiers.has(soldier)
                hero._controlledSoldiers.remove(soldier)

    function getControlledSoldiers() returns LinkedList<SoldierEntity>
        return this._controlledSoldiers.copy()

    function isSoldierControlled(SoldierEntity soldier) returns bool
        return this._controlledSoldiers.has(soldier)

    function addControlledSoldier(SoldierEntity soldier)
        this._controlledSoldiers.add(soldier)

    
    override function applyUpgrades()

    private texttag _respawnText

    override protected function initalize()
        this._ghost = CreateUnit(this.getOwner().getPlayer(), HERO_GHOST_ID, this.getPos().x, this.getPos().y, 270)
        this._ghost.setInvulnerable(true)
        this._ghost.hide()
        this._respawnText = CreateTextTagUnitBJ("", this._ghost, 0, 10, 0, 100, 0, 0)
        SetTextTagVisibility(this._respawnText, false)
        
        this.getUnit().setInvulnerable(true)

        new CommandAttack(this.getUnit())
        new CommandRecruitUnit(this.getUnit())
        new CommandMove(this.getUnit())
        new CommandRecruitArea(this.getUnit())
        new CommandFollow(this.getUnit())
        new CommandRelease(this.getUnit())
        
        this.onDeath() (unit killer, CallbackDeath callback) ->
            this._controlledSoldiers.forEach() (SoldierEntity t) ->
                ControlledBuff.remove(t)
            this._controlledSoldiers.clear()
            this.reviveAndHideHeroAndShowGhost()
            if this.getMaxRespawnTime() < 60
                this.increaseMaxRespawnTime(bj_isSinglePlayer?1:5)
            this.increaseRespawnTime(this.getMaxRespawnTime(), false)
            this.refreshTextTag()
            bool even = false
            this._closureTerminator.periodically(0.5) (CallbackClosureTerminator terminator) ->
                even = not even
                this.refreshTextTag()
                if not this._inChallange and even
                    if this.getRespawnTime() == 0
                        terminator.terminate(terminator)
                        this.hideGhostAndShowHero()
                    else
                        this.decreaseRespawnTime(1)

    function refreshTextTag()
        if this.getRespawnTime() > 0
            SetTextTagVisibility(this._respawnText, true)
            SetTextTagPosUnitBJ(this._respawnText, this._ghost, 0)
            SetTextTagTextBJ(this._respawnText, this.getRespawnTime().toString()+"s", 10)
        else
            SetTextTagVisibility(this._respawnText, false)

    /** Moves player camera to hero */
    function focus()
        this.getOwner().getPlayer().panCamToTimed(this.getUnit(), 0)

    function select()
        this.getOwner().getPlayer().select(this.getUnit())

/** finds owner type linked to player primitive */
public function unit.toHeroType() returns Hero
    return _heroes.filter((Hero hero) -> hero.getUnit() == this or hero.getGhost() == this).getFirst()