package Worker

import initlater Fighter
import initlater Militia
import initlater Footman
import WorkerConstants
import EffectUtils
import UnitEntity
import Owner
import Ids
import initlater WorkerHall

public class Worker extends UnitEntity
	private WorkerHall _workerHall = null
	private int _tripsToMine = 0
	private bool _carryingGold = false

	CallbackOrder _orderCallback

	construct(unit obj, WorkerHall workerHall)
		super(obj)
		this._workerHall = workerHall
		this.onDeath() (unit killer, CallbackDeath callback) ->
			this._closureTerminator.after(5) -> 
				this.remove(false)

	construct(vec2 pos, player owner, WorkerHall workerHall)
		super(CreateUnit(owner, WORKER_ID, pos.x, pos.y, 270))
		this._workerHall = workerHall
		this.onDeath() (unit killer, CallbackDeath callback) ->
			this._closureTerminator.after(5) -> 
				this.remove(false)

	construct(vec2 pos, player owner, real dir, WorkerHall workerHall)
		super(CreateUnit(owner, WORKER_ID, pos.x, pos.y, dir))
		this._workerHall = workerHall
		this.onDeath() (unit killer, CallbackDeath callback) ->
			this._closureTerminator.after(5) -> 
				this.remove(false)

	ondestroy
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null

	/** returns the worker hall this unit belongs to */
	function getWorkerHall() returns WorkerHall
		return this._workerHall

	/** returns the amount of trips this worker has made to the mines */
	function getTripsToMine() returns int
		return this._tripsToMine

	/** returns true if worker is carrying gold */
	function isCarryingGold() returns bool
		return this._carryingGold

	override function applyUpgrades()
		this.applyMoveSpeed(this.getOwner().getResearch(WORKER_HALL_MOVEMENT_SPEED_ID)*75.)

	override function initalize()
		if this.getOwner().getPlayer() != this.getOwner().getSide().getSidePlayer()
			this.getUnit().setOwner(this.getOwner().getSide().getSidePlayer(), false)
		this.getUnit().setColor(this.getOwner().getPlayer().getColor())

		this.onDeath() (unit killer, CallbackDeath callback) ->
			this.getUnit().addEffect("Objects\\Spawnmodels\\Orc\\Orcblood\\BattrollBlood.mdl", AttachmentPoints.chest).destrAfter(0.5)
			if this.isCarryingGold() and killer != null
				if killer.getOwner().toOwnerType() != this.getOwner()
					killer.getOwner().toOwnerType().getPlayer().addGold(50)
				if killer.getOwner() != killer.getOwner().toOwnerType().getSide().getSidePlayer()
					killer.getOwner().toOwnerType().getHero().getUnit().addEffect("UI\\Feedback\\GoldCredit\\GoldCredit.mdl", AttachmentPoints.chest).destrAfter(1)

		this.decideNextAction()

	function goToMine(unit mine)
		if this._orderCallback != null
			this._orderCallback.cancel.call()
		this._orderCallback = this.orderMove(mine, WORKER_MINE_DISTANCE) (boolean reached) ->
			this._orderCallback = null
			this.orderStop()
			if reached
				this._carryingGold = true
				this.getUnit().hide()
				this._closureTerminator.after(1) -> 
					this.getUnit().show()
					this.getUnit().addAnimationProperties("gold", true)
					this.decideNextAction()
			else
				this._closureTerminator.after(1) -> 
					this.decideNextAction()

	function decideNextAction()
		if not this.isCarryingGold() and this.getOwner().getSide().getGate().isDamaged() and not this.getWorkerHall().isRepairDisabled()
			this.debugOrder("Go for gate repair")
			// The gate needs repair, let's go to the worker hall and fetch lumber
			this.orderMove(this.getWorkerHall().getUnit(), 550) (boolean reached) ->
				// Let's go inside and get lumber
				if reached and this.getOwner().getSide().getGate().isDamaged()
					this.getUnit().hide()
					this.getUnit().addAnimationProperties("lumber", true)
					this._closureTerminator.after(1) -> 
						// Let's go outside and head towards the gate control
						this.getUnit().show()
						this.orderMove(this.getOwner().getSide().getGate().getGateControl().getUnit(), 200) (boolean reached) ->
							if reached and this.getOwner().getSide().getGate().isDamaged()
								// We have reached the gate control, let's start working
								this.orderHoldPosition()
								this.getUnit().setAnimation("attack")

								// Each stroke of the hammer rebuilds the gate
								let cbp = this._closureTerminator.periodically(1) (CallbackClosureTerminator terminator) ->
									this.getOwner().getSide().getGate().increaseHealth(25.*(this.getOwner().getResearch(WORKER_HALL_WORKER_REPAIR_UPGRADE_ID)+1.))
									this.getUnit().setAnimation("attack")
								
								// After a little while the lumber ran out
								this._closureTerminator.after(2) ->
									cbp.terminate(cbp)
									this.getUnit().removeAnimationProperties("lumber")
									this.decideNextAction()
							else
								// We were unable to reach the gate control for some reason
								this.getUnit().removeAnimationProperties("lumber")
								this._closureTerminator.after(1) -> 
									this.decideNextAction()
				else
					// No needs to repair the gate
					this._closureTerminator.after(1) -> 
						this.decideNextAction()		
		else if not this.isCarryingGold()
			this.debugOrder("Go to mine")
			// I should go to the mine
			this.goToMine(this.getWorkerHall().getSelectedMine())  
		else if this.getOwner().getHero().isAlive()
			this.debugOrder("Go to hero")
			// I have gold, let's go for the hero
			this.orderMove(this.getOwner().getHero(), 300) (boolean reached) ->
				if reached
					// I have reached my hero, let's give him my gold
					this.getUnit().removeAnimationProperties("gold")
					this.getOwner().getPlayer().addGold(50)
					this.getOwner().getHero().getUnit().addEffect("UI\\Feedback\\GoldCredit\\GoldCredit.mdl", AttachmentPoints.chest).destrAfter(1)
					this._carryingGold = false
					this._tripsToMine++
					if this._tripsToMine < this.getWorkerHall().getWorkerTripsToMineLevel()+1
						this.goToMine(this.getWorkerHall().getSelectedMine())
					else if this.getWorkerHall().getWorkerToMilitiaLevel() == 1
						this.getUnit().setOwner(this.getOwner().getPlayer(), false)
						new Fighter(this)
					else if this.getWorkerHall().getWorkerToMilitiaLevel() == 2
						this.getUnit().setOwner(this.getOwner().getPlayer(), false)
						new Militia(this)
					else if this.getWorkerHall().getWorkerToMilitiaLevel() == 3
						this.getUnit().setOwner(this.getOwner().getPlayer(), false)
						new Footman(this)
					else
						this.remove(true)
				else
					// I was unable to find the hero
					this.orderStop()
					this._closureTerminator.after(1) -> 
						this.decideNextAction()
		else
			this.debugOrder("Wait for hero to respawn")
			// My hero is dead, I should go back to the worker hall and await for him to respawn
			this.orderMove(this.getWorkerHall().getUnit(), 500) (boolean reached) ->
				if reached
					this.orderStop()
					this._closureTerminator.periodically(2) (CallbackClosureTerminator terminator) ->
						if this.getOwner().getHero().isAlive()
							terminator.terminate(terminator)
							this.decideNextAction()
				else
					this.orderStop()
					this._closureTerminator.after(1) -> 
						this.decideNextAction()