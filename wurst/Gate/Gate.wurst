package Gate

import Ids
import ClosureTimers
import Destructables
import SoldierEntity
import Side
import Abilities
import LinkedList
import ClosureEvents
import initlater Owner

init
    _init()

bool _initialized

function _init()
    if _initialized
        return
    _initialized = true
    Destructables.filter(GATE_LEVEL_1_ID).forEach() (destructable t) ->
        Side side = Side.west
        if t.getX() > 0
            side = Side.east
        side.setGate(new Gate(gate(t), GetUnitsOfPlayerAndTypeId(side.getSidePlayer(), UnitIds.scouttower).getRandomUnit()))


public class Gate
    private gate _gate
    private GateControl _gateControl = null
    private bool _open = false
    private real _health
    private real _maxHealth
    private bool _dead = false

    private CallbackPeriodic _run = null

    private LinkedList<CallbackDeath> _onDeath = null
    private LinkedList<CallbackHealthChange> _onHealthChange = null

    private EventListener _onDeathEventListener = null

    construct(gate gate, unit gateControl)
        this._gate = gate
        this._gateControl = new GateControl(gateControl, this)
        nullTimer() -> 
            this.initialize()

    ondestroy
        destroy this._gateControl
        destroy this._run

        if this._onDeathEventListener != null
            destroy this._onDeathEventListener

        // Destroy callbacks and lists
        if this._onDeath != null
            this._onDeath.forEach() (CallbackDeath t) ->
                destroy t
            destroy this._onDeath
            this._onDeath = null

        if this._onHealthChange != null
            this._onHealthChange.forEach() (CallbackHealthChange t) ->
                destroy t
            destroy this._onHealthChange
            this._onHealthChange = null

    /** upgrades tower to next level */
    function upgrade()
        let hp = this.getHealth()
        let maxHP = this.getMaxHealth()
        let ratio = hp/maxHP
        if this.getGate().killable.getTypeId() == GATE_LEVEL_1_ID
            this._gate = gate(this._gate.killable.replace(GATE_LEVEL_2_ID))
        else if this.getGate().killable.getTypeId() == GATE_LEVEL_2_ID
            this._gate = gate(this._gate.killable.replace(GATE_LEVEL_3_ID))
        else if this.getGate().killable.getTypeId() == GATE_LEVEL_3_ID
            this._gate = gate(this._gate.killable.replace(GATE_LEVEL_4_ID))
        if this.isOpen()
            this._gate.open()
        this.setMaxHealth(maxHP+10000)
        this.setHealth(ratio*this.getMaxHealth())

    function increaseMaxHealth(real life)
        this.setMaxHealth(this.getMaxHealth()+life)
    
    function increaseHealth(real life)
        this.setHealth(this.getHealth()+life)
        
        
    private real _lastLifeCheck
    function initialize()
        this.open()
        this.setMaxHealth(1000)
        this.setHealth(1000)

        this._lastLifeCheck = this.getHealth()

        this._run  = doPeriodically(0.5) (CallbackPeriodic cb) ->
            let currentLife = this.getHealth()
            if this._lastLifeCheck != currentLife
                this._lastLifeCheck = currentLife
                this._onHealthChange.forEach() (CallbackHealthChange cbhc) ->
                    cbhc.call(currentLife,cbhc)

            // Check if destroyed
            if not this._dead and this.getHealth() < 50
                this.setHealth(0)
                this._dead = true
                this.open()
                if this._onDeath != null
                    this._onDeath.forEach() (CallbackDeath callback) ->
                        if this._onDeath.has(callback)
                            callback.call(EventData.getKillingUnit(), callback)
            
            if not this._dead
                // Check if enemies are nearby
                bool nearbyEnemies = false
                for unit u in GetUnitsInRangeOfLocAll(800, Location(this.getPos().x, this.getPos().y)).iterator()
                    if u.getOwner().isEnemyOf(this.getGateControl().getOwner().getPlayer()) and u.isAliveTrick()
                        nearbyEnemies = true
                        break
                
                if nearbyEnemies and not this.getGateControl().getUnit().hasAbility(GATE_CONTROL_TOGGLE_ID)
                    // Enemies are near and the gate is still open, let's close it
                    this.getGateControl().getUnit().addAbility(GATE_CONTROL_TOGGLE_ID, 1)
                    this.close()
                else if not nearbyEnemies and this.getGateControl().getUnit().hasAbility(GATE_CONTROL_TOGGLE_ID)
                    // Enemies are no longer near so let's open the gate
                    this.getGateControl().getUnit().removeAbility(GATE_CONTROL_TOGGLE_ID)
                    this.open()

        this.onDestroyed() (unit killer, CallbackDeath callback) ->
            SoldierEntity.allDecideNextAction()

    function getGateControl() returns GateControl
        return this._gateControl
            
    function getGate() returns gate
        return this._gate

    function getPos() returns vec2
        return this._gate.killable.getPos()

    function revive()
        this._dead = false
        this.getGate().killable.restoreLife(this.getMaxHealth(), true)
        this.open()

    function isDamaged() returns bool
        return this.getHealth() < this.getMaxHealth()

    function isDestroyed() returns bool
        return this._dead

    function setHealth(real life)
        var _life = life
        if _life > this.getMaxHealth()
            _life = this.getMaxHealth()
        if this.isOpen()
            this._health = _life
        this._gate.killable.setLife(_life)

    function setMaxHealth(real life)
        if this.isOpen()
            this._maxHealth = life
        this._gate.killable.setMaxLife(life)

    function getHealth() returns real
        if this.isOpen()
            return this._health
        return this._gate.killable.getLife()

    function getMaxHealth() returns real
        if this.isOpen()
            return this._maxHealth
        return this._gate.killable.getMaxLife()

    function isOpen() returns bool
        return this._open

    function open()
        if this._open
            return
        this._open = true
        this._health = this._gate.killable.getLife()
        this._maxHealth = this._gate.killable.getMaxLife()
        this._gate.open()
        this._gate.killable.setInvulnerable(true)
        if this.getGateControl().getUnit().getAbilityLevel(GATE_CONTROL_TOGGLE_ID) > 0
            this.getGateControl().getUnit().setAbilityLevel(GATE_CONTROL_TOGGLE_ID, 2)
        SoldierEntity.allDecideNextAction()

    function close()
        if not this._open
            return
        this._open = false
        this._gate.close()
        this._gate.killable.setInvulnerable(false)
        this.apply()
        if this.getGateControl().getUnit().getAbilityLevel(GATE_CONTROL_TOGGLE_ID) > 0
            this.getGateControl().getUnit().setAbilityLevel(GATE_CONTROL_TOGGLE_ID, 1)
        SoldierEntity.allDecideNextAction()
    
    function apply()
        this._gate.killable.setMaxLife(this._maxHealth)
        this._gate.killable.setLife(this._health)

    //
    // On Death
    //

    /** callback when gate dies */
    function onDestroyed(CallbackDeath callback) returns CallbackDeath
        if this._onDeath == null
            this._onDeath = new LinkedList<CallbackDeath>()
        this._onDeath.add(callback)
        callback.cancel = () ->
            if this._onDeath != null
                this._onDeath.remove(callback)
        return callback

    /** callback when gate HP changes */
    function onHealthChange(CallbackHealthChange callback) returns CallbackHealthChange
        if this._onHealthChange == null
            this._onHealthChange = new LinkedList<CallbackHealthChange>()
        this._onHealthChange.add(callback)
        callback.cancel = () ->
            if this._onHealthChange != null
                this._onHealthChange.remove(callback)
        return callback

class GateControl extends EventEntity
    private Gate _gate
    private player _selectedBy
    private texttag _text

    construct(unit u, Gate g)
        super(ReplaceUnitBJ(u, GATE_CONTROL_ID, bj_UNIT_STATE_METHOD_RELATIVE))
        this._gate = g

    function getGate() returns Gate
        return this._gate

    function refreshText()
        let hp = this.getGate().getHealth().toInt()
        let maxHP = this.getGate().getMaxHealth().toInt()
        let ratio = hp/maxHP
        let text = "HP: "+hp.toString()+"/"+maxHP.toString()
        SetTextTagTextBJ(this._text, text, 10)
        SetTextTagColorBJ(this._text, 100.0*(1-ratio), 100.0*ratio, 0, 100)

    override protected function initalize()
        this.getUnit().setInvulnerable(true)
        this._text = CreateTextTagLocBJ("", Location(this.getUnit().getPos().x-50, this.getUnit().getPos().y), 0, 10, 0, 0, 0, 0)
        nullTimer() -> 
            this.refreshText()

        this.getGate().onDestroyed() (unit killer, CallbackDeath callback) ->
            flashEffect(Abilities.fireLordDeathExplode, this.getUnit().getPos())
            this.getUnit().hide()

        this.getGate().onHealthChange() (real life, CallbackHealthChange callback) ->
            this.refreshText()
            if this.getGate().isDestroyed() and this.getGate().getHealth() == this.getGate().getMaxHealth()
                flashEffect(Abilities.reviveHuman1, this.getUnit().getPos())
                this.getGate().revive()
                this.getUnit().show()

        this.onCast(GATE_CONTROL_TOGGLE_ID) (unit target, vec2 pos, CallbackCast callback) ->
            if not this._gate.isOpen()
                this._gate.open()
                this.getUnit().setAbilityLevel(GATE_CONTROL_TOGGLE_ID, 2)
            else
                this._gate.close()
                this.getUnit().setAbilityLevel(GATE_CONTROL_TOGGLE_ID, 1)

        this.getOwner().getSide().getPlayers().forEach() (Owner t) ->
            t.onResearch(GATE_CONTROL_UPGRADE_ID) (int techid) ->
                this.getGate().upgrade()
                this.getOwner().getSide().getPlayers().forEach() (Owner owner) ->
                    if owner.getPlayer() != this._selectedBy
                        owner.setResearch(techid, this._selectedBy.getResearch(techid))
                    owner.print("|cff33ff00"+this._selectedBy.getName()+"|r has upgraded the |cffb61aaeGate|r to Level "+(owner.getResearch(techid)+1).toString(), 3)

        this.getOwner().getSide().getPlayers().forEach() (Owner t) ->
            t.onResearch(GATE_CONTROL_HEALTH_UPGRADE_ID) (int techid) ->
                this.getGate().increaseMaxHealth(250)
                this.getGate().increaseHealth(250)
                this.getOwner().getSide().getPlayers().forEach() (Owner owner) ->
                    if owner.getPlayer() != this._selectedBy
                        owner.setResearch(techid, this._selectedBy.getResearch(techid))
                    owner.print("|cff33ff00"+this._selectedBy.getName()+"|r has upgraded the |cffb61aaeGate|r |cff33ff00health|r to Level "+(owner.getResearch(techid)+1).toString(), 3)

        this.onSelected() (player p) ->
            if p.getSide() == this.getOwner().getSide()
                if this._selectedBy != null and this._selectedBy != p
                    this._selectedBy.print(p.getName()+" wants you to release control over gate", 2)
                    this._selectedBy.toOwnerType().ping(this.getUnit().getPos(), 2)
                    p.print(this._selectedBy.getName()+" is currently using the control tower, he/she has been asked to release control", 2)
                    this._selectedBy.unselect(this.getUnit())
                else
                    this._selectedBy = p
                    this.getUnit().setOwner(this._selectedBy, true)

        this.onDeSelected() (player p) ->
            if this._selectedBy != null and this._selectedBy == p
                this._selectedBy.unselect(this.getUnit())
                this._selectedBy = null
                this.getUnit().setOwner(this.getOwner().getPlayer(), true)
                