package AI

import Owner
import Hero
import ClosureTimers
import Ids
import EntityCallback
import LinkedList

public class AI
    Owner _owner
    
    private LinkedList<unit> _workerHalls = new LinkedList<unit>()
    private LinkedList<unit> _barracks = new LinkedList<unit>()

    construct(Owner owner)
        this._owner = owner
        nullTimer() ->
            this.initialize()

    function initialize()
        this.getOwner().getHero().onDeath() (unit killer, CallbackDeath callback) ->
            this.decideNextAction()
        this.decideNextAction()
        
    function getPlayer() returns player
        return this.getOwner().getPlayer()

    function getOwner() returns Owner
        return this._owner

    function getHero() returns Hero
        return this.getOwner().getHero()

    function getGold() returns int
        return this.getOwner().getPlayer().getGold()

    function getLumber() returns int
        return this.getOwner().getPlayer().getLumber()

    function countBuildings()
        this._workerHalls.clear()
        this._barracks.clear()

        for unit u in GetUnitsOfPlayerAll(this.getPlayer()).iterator()
            let typeid = u.getTypeId()
            if typeid == WORKER_HALL_ID_LEVEL_1 or typeid == WORKER_HALL_ID_LEVEL_2 or typeid == WORKER_HALL_ID_LEVEL_3 or typeid == WORKER_HALL_ID_LEVEL_4
                this._workerHalls.add(u)
            else if typeid == BARRACK_ID_LEVEL_1 or typeid == BARRACK_ID_LEVEL_2 or typeid == BARRACK_ID_LEVEL_3 or typeid == BARRACK_ID_LEVEL_4
                this._barracks.add(u)

    function decideNextAction()
        doAfter(1) ->
            this.countBuildings()

            if this.getHero().isAlive()
                
                if this.getOwner().getSide().getKing().isInNeedOfGuards() and (this.getGold() > 200 or this.getOwner().getSide().getGate().isDamaged())
                    // King dosen't have enough guards, so let's give him some
                    if  GetRandomInt(1, 2) == 1 and this._barracks.size() > 0 and IssueTrainOrderByIdBJ(this._barracks.getRandomElement(), FOOTMAN_ID)
                        // Footman
                    else if  GetRandomInt(1, 2) == 2 and this._barracks.size() > 0 and IssueTrainOrderByIdBJ(this._barracks.getRandomElement(), ARCHER_ID)
                        // Archer

                else if this.getGold() > 35 and not this.getOwner().getSide().getKing().getUnit().getHP() < this.getOwner().getSide().getKing().getUnit().getMaxHP()
                    // King needs help
                    if  GetRandomInt(1, 2) == 1 and this._barracks.size() > 0 and IssueTrainOrderByIdBJ(this._barracks.getRandomElement(), FOOTMAN_ID)
                        // Archer
                else if this.getGold() > 40 and not this.getOwner().getSide().getGate().isOpen()
                    // Gate needs attention
                    if  GetRandomInt(1, 2) == 1 and this._barracks.size() > 0 and IssueTrainOrderByIdBJ(this._barracks.getRandomElement(), ARCHER_ID)
                        // Archer

                if this._workerHalls.size() > 0 and GetRandomInt(1, 2) == 1 and IssueTrainOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_ID)
                    // Sends a expedition
                
                // Let's upgrade if we can
                if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_ID_LEVEL_2)
                    // Worker Hall - Level 2
                else if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_WORKER_TO_MILITIA_UPGRADE_ID)
                    // Worker Hall - Worker to Militia (and upgrades)
                else if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_WORKER_REPAIR_UPGRADE_ID)
                    // Worker Hall - Repair Upgrade
                else if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_MOVEMENT_SPEED_ID)
                    // Worker Hall - Movement Speed
                else if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_ATTACK_DAMAGE_ID)
                    // Worker Hall - Attack Damage
                else if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_ARMOR_ID)
                    // Worker Hall - Armor
                else if IssueUpgradeOrderByIdBJ(this._barracks.getRandomElement(), BARRACK_ID_LEVEL_2)
                    // Barrack - Level 1
                else if IssueUpgradeOrderByIdBJ(this._barracks.getRandomElement(), BARRACK_FOOTMAN_DAMAGE_ID)
                    // Barrack - Footman Damage
                else if IssueUpgradeOrderByIdBJ(this._barracks.getRandomElement(), BARRACK_ARCHER_DAMAGE_ID)
                    // Barrack - Archer Damage
                else if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_ID_LEVEL_3)
                    // Worker Hall - Level 3
                else if IssueUpgradeOrderByIdBJ(this._workerHalls.getRandomElement(), WORKER_HALL_ID_LEVEL_4)
                    // Worker Hall - Level 4
                else if IssueUpgradeOrderByIdBJ(this._barracks.getRandomElement(), BARRACK_ID_LEVEL_2)
                    // Barrack - Level 2
                else if IssueUpgradeOrderByIdBJ(this._barracks.getRandomElement(), BARRACK_ID_LEVEL_3)
                    // Barrack - Level 3
                else if IssueUpgradeOrderByIdBJ(this._barracks.getRandomElement(), BARRACK_ID_LEVEL_4)
                    // Barrack - Level 4

                // Let's build if we can
                if this._workerHalls.size() < 1
                    // Let's build a worker hall
                    this.build(WORKER_HALL_ID_LEVEL_1) -> 
                        this.countBuildings()
                        if GetRandomInt(1, 2) == 2
                            IssueImmediateOrderBJ(this._workerHalls.getRandomElement(), WORKER_HALL_SELECT_MINE_ORDER_STRING)
                        this.decideNextAction()
                else if this.getGold() > (this._barracks.size()<1 ? 200 : 1000) and this.getLumber() > 0 and this._barracks.size() < 4
                    // Let's build a barrack
                    this.build(BARRACK_ID_LEVEL_1)
                else
                    this.decideNextAction()
                    

    function build(int typeid)
        this.build(typeid, null)

    function build(int typeid, CallbackVoid cb)
        rect r
        let kx = this.getOwner().getSide().getKing().getPos().x
        let gx = this.getOwner().getSide().getGate().getPos().x
        let w = GetWorldBounds()
        if gx < 0
            r = Rect(kx, w.getMinY(), gx-200, w.getMaxY())
        else
            r = Rect(kx, w.getMinY(), gx+200, w.getMaxY())
        this.getHero().orderBuild(typeid, r) (bool success) ->
            if cb == null
                this.decideNextAction()
            else
                doAfter(0.1) -> // To prevent running before initialize
                    cb.call()
                    destroy cb