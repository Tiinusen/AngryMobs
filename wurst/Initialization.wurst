package Initialization

import Hero
import AI
import Side
import Owner
import ClosureTimers
import King
import EntityCallback
import Ids
import Collaborators
import DialogBox

bool isStaffPresent = false

init
	spawn()
	createVictoryCondition()
	createHelp()
	Owner.getActive().forEach() (Owner owner) ->
		owner.getPlayer().addGold(bj_isSinglePlayer?1000:100)
		owner.getPlayer().addLumber(1)
		if Collaborators.is(owner.getPlayer().getName())
			print(Collaborators.description(owner.getPlayer().getName()), 20)
			isStaffPresent = true
		showDialog(owner)
	// Keep time at noon
	SetTimeOfDay(12)
	doPeriodically(30) (CallbackPeriodic cb) ->
		SetTimeOfDay(12)
	// Passive gold income each minute
	doPeriodically(60) (CallbackPeriodic cb) ->
		Owner.getActive().forEach() (Owner owner) ->
			owner.getPlayer().addGold(100)
	// Passive lumber income each five minute
	doPeriodically(300) (CallbackPeriodic cb) ->
		Owner.getActive().forEach() (Owner owner) ->
			owner.getPlayer().addLumber(1)
	// Shade side players money amongst all players of that side
	doPeriodically(1) (CallbackPeriodic cb) ->
		if Side.west.getSidePlayer().getGold() > 0
			let players = Side.west.getPlayers().filter((Owner t) -> t.isPlaying())
			let share = Side.west.getSidePlayer().getGold() / players.size()
			Side.west.getSidePlayer().setGold(0)
			players.forEach() (Owner t) ->
				t.getPlayer().addGold(share.toInt())
		if Side.east.getSidePlayer().getGold() > 0
			let players = Side.east.getPlayers().filter((Owner t) -> t.isPlaying())
			let share = Side.east.getSidePlayer().getGold() / players.size()
			Side.east.getSidePlayer().setGold(0)
			players.forEach() (Owner t) ->
				t.getPlayer().addGold(share.toInt())
	
	if not bj_isSinglePlayer and isStaffPresent
		print("|cffffcc00Welcome to this Alpha Playtest !|r\n\nTodays mission is to evaluate the |cffffcc00balance|r",5)
		doAfter(5) -> 
			print("First off, |cff33ff00read tooltips|r, check the help [|cffffcc00F9|r] and please be patient, not everything is working perfectly\n\nSecondly, AI behavior is mostly as intended, so units near the king is |cff33ff00not bugged|r, they are |cff33ff00guarding|r the |cd3fffb00King|r, and lastly, give feedback if you see parts needing improvement or ideas\n\nThank you, Good Luck and Have Fun !",15)

function showDialog(Owner o)
	if not o.getPlayer().isComputer()
		nullTimer() -> 
			let tempBox = new DialogBox("First time playing?")
			tempBox.addButton("|cff33ff00Enable tutorials") ->
				destroy tempBox
				o.setTutorialEnabled(true)
			tempBox.addButton("|cffccc012Disable tutorials") ->
				destroy tempBox
			tempBox.display(o.getPlayer(), true)

function spawn()
	Side.west.setKing(new King(Side.west.getSidePlayer().getStartLocation(), Side.west.getSidePlayer()))
	Side.east.setKing(new King(Side.east.getSidePlayer().getStartLocation(), Side.east.getSidePlayer()))

	Side.west.getPlayers().forEach() (Owner owner) ->
		new Hero(owner.getPlayer(), owner.getPlayer().getStartLocation())
			..focus()
			..select()
		if owner.getPlayer().isComputer()
			new AI(owner)
	Side.east.getPlayers().forEach() (Owner owner) ->
		new Hero(owner.getPlayer(), owner.getPlayer().getStartLocation())
			..focus()
			..select()
		if owner.getPlayer().isComputer()
			new AI(owner)

function createHelp()
	nullTimer() -> 
		CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "About", "The goal with this game mode is to |cffff0800kill|r the enemy |cd3fffb00King|r, fair and simple|n|nSince this game mode might be unorthodox |cff33ff00you should read|r the other sections aswell to not miss out on core mechanics that might alter the game experience if left un-used", Icons.bTNCommand)
		CreateQuestBJ(bj_QUESTTYPE_REQ_DISCOVERED, "Income", "Thera are a few ways to get income in this game|nEach |cd419d4c5one minute|r each player receives |cd5dab511100g|r of income|n|cd5dab51550g|r per worker carrying gold reaching hero|n|cd5dab51550g|r per killed enemy worker carrying gold|n|nAll gold accumulated by king is shared amongst the players|n|nEach |cd419d4c5five minute|r |cd413cc2bone lumber|r is given to each player", Icons.bTNChestOfGold)
		//CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "The King", "The |cd3fffb00King|r is your teams most important character, keep him alive at all cost.|n|nYou can accomplish this task by controlling him, upgrading him and keeping him safe and away from danger", Icons.bTNTheCaptain)
		CreateQuestBJ(bj_QUESTTYPE_OPT_DISCOVERED, "The Gate", "The |cffb61aaeGate|r protects you and the |cd3fffb00King|r and does so by closing the enemy outside|n|nIt does so by automatically closing when enemies are near|nNext to the |cffb61aaeGate|r is the |cffb61aaeGate|r control, this building can perform open/close actions of the |cffb61aaeGate|r and also allows upgrading the |cffb61aaeGate|r|nIf the |cffb61aaeGate|r gets damaged or destroyed then workers will prioritizing repairing or rebuilding it", Icons.bTNDemonGate)

function createVictoryCondition()
	Side.west.getKing().onDeath() (unit killer, CallbackDeath callback) ->
		Side.east.getPlayers().forEach() (Owner t) ->
			t.print("You have defeated the enemy king")
		Side.west.getPlayers().forEach() (Owner t) ->
			t.print("Your king has been slayed")
		doAfter(5) -> 
			print("The Game has Reached it's End",25)
		doAfter(10) -> 
			print("Feel free to share feedback and thoughts",20)
		doAfter(85) -> 
			print("Time's up, see you again soon !",5)
		doAfter(90) -> 
			EndGame(false)
	Side.east.getKing().onDeath() (unit killer, CallbackDeath callback) ->
		Side.west.getPlayers().forEach() (Owner t) ->
			t.print("You have defeated the enemy king")
		Side.east.getPlayers().forEach() (Owner t) ->
			t.print("Your king has been slayed")
		doAfter(5) -> 
			print("The Game has Reached it's End",55)
		doAfter(10) -> 
			print("Feel free to share feedback and thoughts",50)
		doAfter(55) -> 
			print("Time's up, see you again soon !",5)
		doAfter(60) -> 
			EndGame(false)