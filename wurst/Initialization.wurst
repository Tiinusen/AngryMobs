package Initialization

import Hero
import AI
import Side
import Owner
import ClosureTimers
import King
import EntityCallback

init
	spawn()
	createVictoryCondition()
	Owner.getActive().forEach() (Owner owner) ->
		owner.getPlayer().addGold(10000)
		owner.getPlayer().addLumber(10)
	SetTimeOfDay(12)
	doPeriodically(30) (CallbackPeriodic cb) ->
		SetTimeOfDay(12)
	
function spawn()
	Side.west.setKing(new King(Side.west.getSidePlayer().getStartLocation(), Side.west.getSidePlayer()))
	Side.east.setKing(new King(Side.east.getSidePlayer().getStartLocation(), Side.east.getSidePlayer()))

	Side.west.getPlayers().forEach() (Owner owner) ->
		new Hero(owner.getPlayer(), owner.getPlayer().getStartLocation())
			..focus()
			..select()
		if owner.getPlayer().isComputer()
			new AI(owner)
	Side.east.getPlayers().forEach() (Owner owner) ->
		new Hero(owner.getPlayer(), owner.getPlayer().getStartLocation())
			..focus()
			..select()
		if owner.getPlayer().isComputer()
			new AI(owner)
	
function createHelp()
	let q = CreateQuest()
	QuestSetRequired(q, true)
	QuestSetTitle(q, "Goal")
	QuestSetDescription(q, "The goal with this game mode is to kill the enemy King")

function createVictoryCondition()
	Side.west.getKing().onDeath() (unit killer, CallbackDeath callback) ->
		Side.east.getPlayers().forEach() (Owner t) ->
			t.print("You have defeated the enemy king")
		Side.west.getPlayers().forEach() (Owner t) ->
			t.print("Your king has been slayed")
		doAfter(5) -> 
			EndGame(false)
	Side.east.getKing().onDeath() (unit killer, CallbackDeath callback) ->
		Side.west.getPlayers().forEach() (Owner t) ->
			t.print("You have defeated the enemy king")
		Side.east.getPlayers().forEach() (Owner t) ->
			t.print("Your king has been slayed")
		doAfter(5) -> 
			EndGame(false)