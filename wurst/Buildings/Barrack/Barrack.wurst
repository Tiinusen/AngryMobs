package Barrack

import Footman
import Archer
import Ids
import BarrackConstants
import RunnerEntity
import Owner

init
    EventEntity.onConstructionFinished(BARRACK_ID_LEVEL_1) (unit building, CallbackConstruction callback) ->
        new Barrack(building)

public class Barrack extends RunnerEntity
    construct(unit obj)
        super(obj, BARRACK_RUN_CYCLE_INTERVAL)

    construct(player owner, vec2 pos)
        super(CreateUnit(owner, BARRACK_ID_LEVEL_1, pos.x, pos.y, 270), BARRACK_RUN_CYCLE_INTERVAL)

    construct(player owner, vec2 pos, real dir)
        super(CreateUnit(owner, BARRACK_ID_LEVEL_1, pos.x, pos.y, dir), BARRACK_RUN_CYCLE_INTERVAL)

    override function initalize()
        this.getUnit().setInvulnerable(true)
        this.onUpgraded() (int typeid) ->
            this.getUnit().setInvulnerable(true)
            this.setLevel(this.getLevel()+1)

        this.onCast(BARRACK_SLOT_1_ID) (unit target, vec2 pos, CallbackCast callback) ->
            var lvl = this.getUnit().getAbilityLevel(BARRACK_SLOT_1_ID)+1
            if lvl > 2
                lvl = 1
            this.getUnit().setAbilityLevel(BARRACK_SLOT_1_ID, lvl)

        this.onCast(BARRACK_SLOT_2_ID) (unit target, vec2 pos, CallbackCast callback) ->
            var lvl = this.getUnit().getAbilityLevel(BARRACK_SLOT_2_ID)+1
            if lvl > 2
                lvl = 1
            this.getUnit().setAbilityLevel(BARRACK_SLOT_2_ID, lvl)

        this.onCast(BARRACK_SLOT_3_ID) (unit target, vec2 pos, CallbackCast callback) ->
            var lvl = this.getUnit().getAbilityLevel(BARRACK_SLOT_3_ID)+1
            if lvl > 2
                lvl = 1
            this.getUnit().setAbilityLevel(BARRACK_SLOT_3_ID, lvl)

        this.onCast(BARRACK_SLOT_4_ID) (unit target, vec2 pos, CallbackCast callback) ->
            var lvl = this.getUnit().getAbilityLevel(BARRACK_SLOT_4_ID)+1
            if lvl > 2
                lvl = 1
            this.getUnit().setAbilityLevel(BARRACK_SLOT_4_ID, lvl)

        this.onSold(FOOTMAN_ID) (unit sold, CallbackSold callback) ->
            new Footman(sold)

        this.onSold(ARCHER_ID) (unit sold, CallbackSold callback) ->
            new Archer(sold)
            
    override function run()
        // Slot 1
        if this.getUnit().getAbilityLevel(BARRACK_SLOT_1_ID) == 1
            new Footman(this.getUnit().getPos(), this.getOwner().getPlayer())
        else if this.getUnit().getAbilityLevel(BARRACK_SLOT_1_ID) == 2
            new Archer(this.getUnit().getPos(), this.getOwner().getPlayer())

        // Slot 2
        if this.getUnit().getAbilityLevel(BARRACK_SLOT_2_ID) == 1
            new Footman(this.getUnit().getPos(), this.getOwner().getPlayer())
        else if this.getUnit().getAbilityLevel(BARRACK_SLOT_2_ID) == 2
            new Archer(this.getUnit().getPos(), this.getOwner().getPlayer())

        // Slot 3
        if this.getUnit().getAbilityLevel(BARRACK_SLOT_3_ID) == 1
            new Footman(this.getUnit().getPos(), this.getOwner().getPlayer())
        else if this.getUnit().getAbilityLevel(BARRACK_SLOT_3_ID) == 2
            new Archer(this.getUnit().getPos(), this.getOwner().getPlayer())

        // Slot 4
        if this.getUnit().getAbilityLevel(BARRACK_SLOT_4_ID) == 1
            new Footman(this.getUnit().getPos(), this.getOwner().getPlayer())
        else if this.getUnit().getAbilityLevel(BARRACK_SLOT_4_ID) == 2
            new Archer(this.getUnit().getPos(), this.getOwner().getPlayer())