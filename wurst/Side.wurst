package Side

import LinkedList
import initlater King
import initlater Gate
import initlater Owner

public class Side

    private player _sidePlayer
    private LinkedList<Owner> _players = new LinkedList<Owner>()

    private Gate _gate
    private King _king

    static var west = new Side(Player(13))
    static var east = new Side(Player(12))

    construct(player p)
        this._sidePlayer = p

    /** returns player primitive belonging to computer of alliance */
    function getSidePlayer() returns player
        return this._sidePlayer

    /** returns all players as owner objects of that side except computer of alliance player */
    function getPlayers() returns LinkedList<Owner>
        return this._players.copy()

    /** gets the enemy side */
    function getEnemySide() returns Side
        if this == Side.west
            return Side.east
        return Side.west

    /** called during init when gate is set */
    function setGate(Gate g)
        this._gate = g

    /** gets the gate primitive */
    function getGate() returns Gate
        return this._gate

    /** called during init when gate is set */
    function setKing(King king)
        this._king = king

    /** gets the king of this side */
    function getKing() returns King
        return this._king

    /** makes player join this side */
    function join(Owner u)
        this._players.add(u)
        
/** returns side which player belongs to */
public function player.getSide() returns Side
    return this.isAllyOf(Side.west.getSidePlayer()) ? Side.west : Side.east