package UnitEntity

import public EventEntity
import Orders
import LinkedList
import initlater Gate
import initlater Owner
import ClosureTimers

public tuple damage(int base, int dices, int sides)

public function damage.op_plus( damage v ) returns damage
	return damage(this.base + v.base, this.dices + v.dices, this.sides + v.sides)

abstract public class UnitEntity extends EventEntity

	private CallbackOrder _orderCallback = null

	private static LinkedList<UnitEntity> _units = null

	CallbackSingle _orderTimeout = null

	construct(unit obj)
		super(obj)
		_init()
		_units.add(this)
		this.applyUpgrades()

	ondestroy
		_init()
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			destroy this._orderCallback
		if this._orderTimeout != null
			destroy this._orderTimeout
		_units.remove(this)

	static private function _init()
		if _units == null
			_units = new LinkedList<UnitEntity>()
		

	static function applyUpgradesOnAllUnits()
		_init()
		_units.forEach() (UnitEntity t) ->
			t.applyUpgrades()

	static function applyUpgradesOnPlayerUnits(Owner o)
		UnitEntity.applyUpgradesOnPlayerUnits(o.getPlayer())

	static function applyUpgradesOnPlayerUnits(player p)
		_init()
		_units.forEach() (UnitEntity t) ->
			if t.getOwner().getPlayer() == p
				t.applyUpgrades()

	/** Gets called when an upgrade is made or when the unit is created */
	function applyUpgrades()

	private damage array[2] _damage = [damage(-1, -1, -1), damage(-1, -1, -1)]
	private function _initAttackDamage(int weaponIndex)
		if this._damage[weaponIndex].base == -1
			this._damage[weaponIndex].base = this.getUnit().getBaseDamage(weaponIndex)
		if this._damage[weaponIndex].dices == -1
			this._damage[weaponIndex].dices = this.getUnit().getDiceNumber(weaponIndex)
		if this._damage[weaponIndex].sides == -1
			this._damage[weaponIndex].sides = this.getUnit().getDiceSides(weaponIndex)
	
	/** Gets weapon damage with modifiers */
	function getAttackDamage(int weaponIndex) returns damage
		return this.getAttackDamage(weaponIndex, false)

	/** Gets weapon damage with or without modifiers */
	function getAttackDamage(int weaponIndex, bool unmodified) returns damage
		this._initAttackDamage(weaponIndex)
		if unmodified
			return this._damage[weaponIndex]
		return damage(this.getUnit().getBaseDamage(weaponIndex), this.getUnit().getDiceNumber(weaponIndex), this.getUnit().getDiceSides(weaponIndex))

	/** Sets weapon damage */
	function setAttackDamage(int weaponIndex, damage damage)
		this._initAttackDamage(weaponIndex)
		this.getUnit().setBaseDamage(damage.base, weaponIndex)
		this.getUnit().setDiceNumber(damage.dices, weaponIndex)
		this.getUnit().setDiceSides(damage.sides, weaponIndex)

	/** Sums default damage with provided and sets as new damage  */
	function applyAttackDamage(int weaponIndex, damage damage)
		this.setAttackDamage(weaponIndex, this.getAttackDamage(weaponIndex, true)+damage)

	private real array[2] _attackCooldown = [-1, -1]
	private function _initAttackCooldown(int weaponIndex)
		if this._attackCooldown[weaponIndex] == -1
			this._attackCooldown[weaponIndex] = this.getUnit().getAttackCooldown(weaponIndex)
	
	/** Gets weapon attack cooldown with modifiers */
	function getAttackCooldown(int weaponIndex) returns real
		return this.getAttackCooldown(weaponIndex, false)

	/** Gets weapon attack cooldown with or without modifiers */
	function getAttackCooldown(int weaponIndex, bool unmodified) returns real
		this._initAttackCooldown(weaponIndex)
		if unmodified
			return this._attackCooldown[weaponIndex]
		return this.getUnit().getAttackCooldown(weaponIndex)

	/** Sets weapon attack cooldown */
	function setAttackCooldown(int weaponIndex, real cooldown)
		this._initAttackCooldown(weaponIndex)
		this.getUnit().setAttackCooldown(cooldown, weaponIndex)

	/** Sums default attack cooldown with provided and sets as new attack cooldown  */
	function applyAttackSpeed(int weaponIndex, real cooldown)
		this.setAttackCooldown(weaponIndex, this.getAttackCooldown(weaponIndex, true)+cooldown)
	
	private real _armor = -1
	private function _initArmor()
		if this._armor == -1
			this._armor = this.getUnit().getArmor()

	/** Gets armor with or without modifiers */
	function getArmor() returns real
		return this.getArmor(false)

	/** Gets armor with or without modifiers */
	function getArmor(bool unmodified) returns real
		this._initArmor()
		if unmodified
			return this._armor
		return this.getUnit().getArmor()

	/** Sets armor */
	function setArmor(real armor)
		this._initArmor()
		this.getUnit().setArmor(armor)

	/** Sums default armor with provided and sets as new armor  */
	function applyArmor(real armor)
		this.setArmor(this.getArmor(true)+armor)

	private real _moveSpeed = -1
	private real _turnSpeed = -1
	private function _initSpeed()
		if this._moveSpeed == -1
			this._moveSpeed = this.getUnit().getMoveSpeed()
		if this._turnSpeed == -1
			this._turnSpeed = this.getUnit().getTurnSpeed()
	
	/** Gets movement speed with modifiers */
	function getMoveSpeed() returns real
		return this.getMoveSpeed(false)

	/** Gets movement speed with or without modifiers */
	function getMoveSpeed(bool unmodified) returns real
		this._initSpeed()
		if unmodified
			return this._moveSpeed
		return this.getUnit().getMoveSpeed()

	/** Sets movement speed */
	function setMoveSpeed(real speed)
		this._initSpeed()
		this.getUnit().setMoveSpeed(speed)

	/** Sums default movement speed with provided and sets as new movement speed  */
	function applyMoveSpeed(real speed)
		this.setMoveSpeed(this.getMoveSpeed(true)+speed)

	/** Gets turn speed with modifiers */
	function getTurnSpeed() returns real
		return this.getTurnSpeed(false)

	/** Gets turn speed with or without modifiers */
	function getTurnSpeed(bool unmodified) returns real
		this._initSpeed()
		if unmodified
			return this._turnSpeed
		return this.getUnit().getTurnSpeed()
		
	/** Sets turn speed */
	function setTurnSpeed(real speed)
		this._initSpeed()
		this.getUnit().setMoveSpeed(speed)

	/** Sums default turn speed with provided and sets as new turn speed  */
	function applyTurnSpeed(real speed)
		this.setTurnSpeed(this.getTurnSpeed(true)+speed)
		
	/*
	 * Orders
	 */
	function orderBuild(int typeid, rect area, CallbackOrder callback) returns CallbackOrder
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		let cb = doPeriodically(1) (CallbackPeriodic cb) ->
			let p = area.randomPoint()
			if IssueBuildOrderById(this.getUnit(), typeid, p.x, p.y)
				destroy cb
				let cbc = EventEntity.onConstructionFinished() (unit building, CallbackConstruction cbc) ->
					if building.getTypeId() == typeid and building.getOwner() == this.getOwner().getPlayer()
						cbc.cancel.call()
						destroy cbc
						this._orderCallback = null
						if this._orderTimeout != null
							destroy this._orderTimeout
							this._orderTimeout = null
						callback.call(true)
						destroy callback
				this._orderTimeout = doAfter(30) ->
					this._orderTimeout = null
					cbc.cancel.call()
					destroy cbc
					this._orderCallback = null
					this.orderStop()
					callback.call(false)
					destroy callback
				callback.cancel = () ->
					cbc.cancel.call()
					destroy cbc
					if this._orderTimeout != null
						destroy this._orderTimeout
						this._orderTimeout = null
		callback.cancel = () ->
			destroy cb		
		return callback

	/** Issues attack order towards unit */
	function orderAttack(UnitEntity obj)
		this.orderAttack(obj.getUnit())

	/** Issues attack order towards unit */
	function orderAttack(UnitEntity obj, CallbackOrder callback) returns CallbackOrder
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.orderAttack(obj)
		this._orderCallback = callback
		let cbd1 = obj.onDeath() (unit _, CallbackDeath cbd) ->
			this._orderCallback = null
			this.orderStop()
			callback.call(true)
			callback.cancel.call()
			destroy callback
		callback.cancel = () ->
			destroy cbd1
		return callback
		
	/** Issues attack order towards destructable */
	function orderAttack(destructable obj)
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.getUnit().issueTargetOrderById(Orders.attack, obj) 

	/** Issues attack order towards a gate */
	function orderAttack(Gate obj)
		this.orderAttack(obj.getGate().killable)

	/** Issues attack order towards a gate */
	function orderAttack(Gate obj, CallbackOrder callback) returns CallbackOrder
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.orderAttack(obj)
		this._orderCallback = callback
		let cbd1 = obj.onDeath() (unit _, CallbackDeath cbd) ->
			this._orderCallback = null
			this.orderStop()
			callback.call(true)
			callback.cancel.call()
			destroy callback
		callback.cancel = () ->
			cbd1.cancel.call()
			destroy cbd1
		return callback

	/** Issues attack order towards unit */
	function orderAttack(unit obj)
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.getUnit().issueTargetOrderById(Orders.attack, obj) 

	/** Issues attack order towards point */
	function orderAttack(vec2 pos)
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.getUnit().issuePointOrderById(Orders.attack, pos)

	/** Issues attack order towards point */
	function orderAttack(vec2 pos, CallbackOrder callback) returns CallbackOrder
		return this.orderAttack(pos, 256, callback)

	/** Issues attack order towards point */
	function orderAttack(vec2 pos, real distance, CallbackOrder callback) returns CallbackOrder
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.orderAttack(pos)
		this._orderCallback = callback
		let cbwo = this.onWithinOnce(pos, distance) (bool reached, CallbackWithin cbwo) ->
			this._orderCallback = null
			callback.call(true)
			destroy callback
		callback.cancel = cbwo.cancel
		return callback

	/** Issues move order towards unit and fires callback if reached or if unit disappears */
	function orderMove(UnitEntity obj, real distance, CallbackOrder callback) returns CallbackOrder
		return this.orderMove(obj.getUnit(), distance, callback)

	/** Issues follow order towards unit */
	function orderFollow(unit obj)
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.getUnit().issueTargetOrderById(Orders.move, obj)    

	/** Issues move order towards unit and fires callback if reached or if unit disappears */
	function orderMove(unit obj, real distance, CallbackOrder callback) returns CallbackOrder
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.orderFollow(obj)
		this._orderCallback = callback
		if distance <= 512
			// This since a normal move order with a target unit often results with unit never triggering callback since it stops to far away
			let cbwo = this.onWithinOnce(obj, 512) (boolean reached, CallbackWithin wc) ->
				this._orderCallback = null
				if reached
					this.getUnit().issuePointOrderById(Orders.move, obj.getPos())
					let cbwo2 = this.onWithinOnce(obj, distance) (bool reached, CallbackWithin wc2) ->
						this._orderCallback = null
						callback.call(reached)
						destroy callback
					callback.cancel = cbwo2.cancel
				else
					callback.call(false)
					destroy callback
			callback.cancel = cbwo.cancel
		else
			let cbwo = this.onWithinOnce(obj, distance) (bool reached, CallbackWithin wc) ->
				this._orderCallback = null
				callback.call(reached)
				destroy callback
			callback.cancel = cbwo.cancel
		return this._orderCallback

	/** Issues move order towards position */
	function orderMove(vec2 pos)
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.getUnit().issuePointOrderById(Orders.move, pos)
	
	/** Issues move order towards position and fires callback if reached or if unit disappears */
	function orderMove(vec2 pos, real distance, CallbackOrder callback) returns CallbackOrder
		if this._orderCallback != null
			this._orderCallback.cancel.call()
		this.getUnit().issuePointOrderById(Orders.move, pos)
		this._orderCallback = callback
		let cbwo = this.onWithinOnce(pos, distance) (bool reached, CallbackWithin wc) ->
			callback.call(reached)
			destroy callback
		callback.cancel = cbwo.cancel
		return this._orderCallback

	/** Issues stop order immediately */
	function orderStop()
		if this._orderCallback != null
			this._orderCallback.cancel.call()
			this._orderCallback = null
		this.getUnit().issueImmediateOrderById(Orders.stop)