package UnitEntity

import public EventEntity
import Orders
import LinkedList
import initlater Owner

public tuple damage(int base, int dices, int sides)

public function damage.op_plus( damage v ) returns damage
	return damage(this.base + v.base, this.dices + v.dices, this.sides + v.sides)

abstract public class UnitEntity extends EventEntity

	private CallbackWithin _goToCallback = null

	private static LinkedList<UnitEntity> _units = new LinkedList<UnitEntity>()

	construct(unit obj)
		super(obj)
		_units.add(this)
		this.applyUpgrades()

	ondestroy
		if this._goToCallback != null
			destroy this._goToCallback
		_units.remove(this)
		

	static function applyUpgradesOnAllUnits()
		_units.forEach() (UnitEntity t) ->
			t.applyUpgrades()

	static function applyUpgradesOnPlayerUnits(Owner o)
		UnitEntity.applyUpgradesOnPlayerUnits(o.getPlayer())

	static function applyUpgradesOnPlayerUnits(player p)
		_units.forEach() (UnitEntity t) ->
			if t.getOwner().getPlayer() == p
				t.applyUpgrades()

	/** Gets called when an upgrade is made or when the unit is created */
	function applyUpgrades()

	private damage array[2] _damage = [damage(-1, -1, -1), damage(-1, -1, -1)]
	private function _initAttackDamage(int weaponIndex)
		if this._damage[weaponIndex].base == -1
			this._damage[weaponIndex].base = this.getUnit().getBaseDamage(weaponIndex)
		if this._damage[weaponIndex].dices == -1
			this._damage[weaponIndex].dices = this.getUnit().getDiceNumber(weaponIndex)
		if this._damage[weaponIndex].sides == -1
			this._damage[weaponIndex].sides = this.getUnit().getDiceSides(weaponIndex)
	
	/** Gets weapon damage with modifiers */
	function getAttackDamage(int weaponIndex) returns damage
		return this.getAttackDamage(weaponIndex, false)

	/** Gets weapon damage with or without modifiers */
	function getAttackDamage(int weaponIndex, bool unmodified) returns damage
		this._initAttackDamage(weaponIndex)
		if unmodified
			return this._damage[weaponIndex]
		return damage(this.getUnit().getBaseDamage(weaponIndex), this.getUnit().getDiceNumber(weaponIndex), this.getUnit().getDiceSides(weaponIndex))

	/** Sets weapon damage */
	function setAttackDamage(int weaponIndex, damage damage)
		this._initAttackDamage(weaponIndex)
		this.getUnit().setBaseDamage(damage.base, weaponIndex)
		this.getUnit().setDiceNumber(damage.dices, weaponIndex)
		this.getUnit().setDiceSides(damage.sides, weaponIndex)

	/** Sums default damage with provided and sets as new damage  */
	function applyAttackDamage(int weaponIndex, damage damage)
		this.setAttackDamage(weaponIndex, this.getAttackDamage(weaponIndex, true)+damage)

	private real array[2] _attackCooldown = [-1, -1]
	private function _initAttackCooldown(int weaponIndex)
		if this._attackCooldown[weaponIndex] == -1
			this._attackCooldown[weaponIndex] = this.getUnit().getAttackCooldown(weaponIndex)
	
	/** Gets weapon attack cooldown with modifiers */
	function getAttackCooldown(int weaponIndex) returns real
		return this.getAttackCooldown(weaponIndex, false)

	/** Gets weapon attack cooldown with or without modifiers */
	function getAttackCooldown(int weaponIndex, bool unmodified) returns real
		this._initAttackCooldown(weaponIndex)
		if unmodified
			return this._attackCooldown[weaponIndex]
		return this.getUnit().getAttackCooldown(weaponIndex)

	/** Sets weapon attack cooldown */
	function setAttackCooldown(int weaponIndex, real cooldown)
		this._initAttackCooldown(weaponIndex)
		this.getUnit().setAttackCooldown(cooldown, weaponIndex)

	/** Sums default attack cooldown with provided and sets as new attack cooldown  */
	function applyAttackSpeed(int weaponIndex, real cooldown)
		this.setAttackCooldown(weaponIndex, this.getAttackCooldown(weaponIndex, true)+cooldown)
	
	private real _armor = -1
	private function _initArmor()
		if this._armor == -1
			this._armor = this.getUnit().getArmor()

	/** Gets armor with or without modifiers */
	function getArmor() returns real
		return this.getArmor(false)

	/** Gets armor with or without modifiers */
	function getArmor(bool unmodified) returns real
		this._initArmor()
		if unmodified
			return this._armor
		return this.getUnit().getArmor()

	/** Sets armor */
	function setArmor(real armor)
		this._initArmor()
		this.getUnit().setArmor(armor)

	/** Sums default armor with provided and sets as new armor  */
	function applyArmor(real armor)
		this.setArmor(this.getArmor(true)+armor)

	private real _moveSpeed = -1
	private real _turnSpeed = -1
	private function _initSpeed()
		if this._moveSpeed == -1
			this._moveSpeed = this.getUnit().getMoveSpeed()
		if this._turnSpeed == -1
			this._turnSpeed = this.getUnit().getTurnSpeed()
	
	/** Gets movement speed with modifiers */
	function getMoveSpeed() returns real
		return this.getMoveSpeed(false)

	/** Gets movement speed with or without modifiers */
	function getMoveSpeed(bool unmodified) returns real
		this._initSpeed()
		if unmodified
			return this._moveSpeed
		return this.getUnit().getMoveSpeed()

	/** Sets movement speed */
	function setMoveSpeed(real speed)
		this._initSpeed()
		this.getUnit().setMoveSpeed(speed)

	/** Sums default movement speed with provided and sets as new movement speed  */
	function applyMoveSpeed(real speed)
		this.setMoveSpeed(this.getMoveSpeed(true)+speed)

	/** Gets turn speed with modifiers */
	function getTurnSpeed() returns real
		return this.getTurnSpeed(false)

	/** Gets turn speed with or without modifiers */
	function getTurnSpeed(bool unmodified) returns real
		this._initSpeed()
		if unmodified
			return this._turnSpeed
		return this.getUnit().getTurnSpeed()
		
	/** Sets turn speed */
	function setTurnSpeed(real speed)
		this._initSpeed()
		this.getUnit().setMoveSpeed(speed)

	/** Sums default turn speed with provided and sets as new turn speed  */
	function applyTurnSpeed(real speed)
		this.setTurnSpeed(this.getTurnSpeed(true)+speed)
		
		

	/** Issues move order towards unit and fires callback if reached or if unit disappears */
	function orderMove(Entity obj, real distance, CallbackWithin callback) returns CallbackWithin
		return this.orderMove(obj.getUnit(), distance, callback)

	/** Issues follow order towards unit */
	function orderFollow(unit obj)
		this.getUnit().issueTargetOrderById(Orders.move, obj)    

	/** Issues move order towards unit and fires callback if reached or if unit disappears */
	function orderMove(unit obj, real distance, CallbackWithin callback) returns CallbackWithin
		if this._goToCallback != null
			this._goToCallback.cancel.call()
		this.orderFollow(obj)
		if distance <= 512
			// This since a normal move order with a target unit often results with unit never triggering callback since it stops to far away
			this._goToCallback = this.onWithinOnce(obj, 512) (boolean reached, CallbackWithin wc) ->
				this._goToCallback = null
				if reached
					this.getUnit().issuePointOrderById(Orders.move, obj.getPos())
					this._goToCallback = this.onWithinOnce(obj, distance) (bool reached, CallbackWithin wc2) ->
						this._goToCallback = null
						callback.call(reached, wc2)
						destroy callback
				else
					callback.call(false, wc)
					destroy callback
		else
			this._goToCallback = this.onWithinOnce(obj, distance) (bool reached, CallbackWithin wc) ->
				callback.call(reached, wc)
				destroy callback
		return this._goToCallback
	
	/** Issues move order towards position and fires callback if reached or if unit disappears */
	function orderMove(vec2 pos, real distance, CallbackWithin callback) returns CallbackWithin
		this.getUnit().issuePointOrderById(Orders.move, pos)
		if this._goToCallback != null
			this._goToCallback.cancel.call()
		this._goToCallback = this.onWithinOnce(pos, distance) (bool reached, CallbackWithin wc) ->
			callback.call(reached, wc)
		return this._goToCallback

	/** Issues stop order immediately */
	function orderStop()
		this.getUnit().issueImmediateOrderById(Orders.stop)